<h1>Започни со Rails</h1>

<h2>Статии</h2>

<!-- <%= link_to article.title, article %> == <a href="<%= article_path(article) %>"> <%= article.title %> </a> ==  <a href="/articles/<%= article.id %>"> <%= article.title %> </a> -->
<ul>
  <% @articles.each do |article| %>
    <li>
      <%= link_to article.title, article %>
    </li>
  <% end %>
</ul>




<h2>Креирање на Rails апликација</h2>

<p>За да креираме Rails апликација наречена blog, потребно е да го искористиме <code>new</code> генераторот на следниот начин:</p>
<ul>
  <li>отвараме терминал</li>
  <li>избираме каде сакаме да креираме нова апликација</li>
  <li>и ја извршуваме следната наредба: <code>rails new blog</code></li>
</ul>

<p>Откако ќе ја креираме апликацијата, се префрламе во нејзиниот фолдер со следната наредба: <code>cd blog</code></p>
<p>Фолдерот blog ќе има бројни генерирани фајлови и фолдери кои ја прават основната структура на Rails апликацијата.</p>
<p>Апликацијата е веќе функционална и може да се види доколку во прозорецот на пребарувачот се впише <code>http://localhost:3000</code>, откако претходно сме го стартувале веб серверот во фолдерот blog преку извршување на следната наредба: <code>bin/rails server</code></p>

<p>Минимално што е потребно за да гледаме содржина на почетната страна на Rails апликацијата е:</p>
<ul>
  <li><code>route</code></li>
  <li><code>controller</code></li>
  <li><code>view</code></li>
</ul>

<p>Со цел да креираме рута, контролер со акција и view, треба да ја извршиме следната команда: <code>bin/rails generate controller Articles index</code> и како резултат добиваме:</p>
<ul>
  <li><code>get "/articles", to: "articles#index"</code> рута напишани во config/routes.rb со Ruby DSL (Domain-Specific Language) со цел да се побара извршување на акцијата index од страна на контролерот Articles</li>
  <li><code>class ArticlesController < ApplicationController</code>е Ruby класa, која наследува од <code>ApplicationController</code> и <code>def index</code>е public методa</li>
  <li><code>index.html.erb</code>е view фајл напишан во app/views/articles/ со HTML и програмскиот јазик Ruby</li>
</ul>

<p>MVC (Model-View-Controller) е шема на дизајнирање на апликацијата чија цел е да ги подели одговорностите на апликацијата.</p>
<p> До сега имаме креирано контролер и view. Со цел да ја комплетираме MVC шемата потребно е уште да генерираме модел, што претставува Ruby класа која е во интеракција со датабазата на апликацијата преку feature на Rails наречен Active Record.</p>
<p> За да дефинираме модел, ќе го искористиме <code>model</code> генераторот, со извршување на следната команда: <code>bin/rails generate model Article title:string body:text</code></p>
<p>Миграциите се користат за да се промени структурата на датабазата на апликацијата. Во Rails миграциите се пишуваат во програмскиот јазик Ruby.</p>
<p>Во продолжение е содржината на новиот миграционен фајл:</p>
<pre><code>
class CreateArticles < ActiveRecord::Migration[7.0]
  def change
    create_table :articles do |t|
      t.string :title
      t.text :body

      t.timestamps
    end
  end
end
</code></pre>
<p>Повикот <code>create_table</code> специфицира како табелата articles треба да биде создадена. По default, методата <code>create_table</code> додава id колона со автоматски инкрементирачки примарен клуч, што значи првиот запис ќе има примарен клуч 1, вториот запис ќе има примарен клуч 2, итн.</p>
<p>Во блокот <code>create_table</code> се дефинирани две колони и тоа <code>title</code> и <code>body</code>, кои беа додадени во извршувањето на командата на генераторот.</p>
<p>На последната линија на овој блок е повик до методата <code>t.timestamps</code>, која дефинира две додатни колони и тоа <code>created_at</code> и <code>updated_at</code>, кои ги дополнува самиот Rails со вредности кога сме креирале или упдејтувале некој објект во моделот.</p>
<p>Со цел да ја комплетираме миграцијата, ќе ја извршиме следната наредба: <code>bin/rails db:migrate</code></p>
<p>За да си поиграме со нашиот модел, ќе искористеме друг feature на Rails наречен конзола. Конзолата е интерактивна средина за програмирање како irb, но истовремено може да се користи за пополнување со податоци во Rails апликацијата.</p>
<p>За да ја стартуваме конзолата ќе ја искористеме следната наредба:  <code>bin/rails console</code></p>
<p>За да иницијализираме нов Article објект во конзолата ќе впишеме пример: <code>irb> article = Article.new(title: "Hello Rails", body: "I am on Rails!")</code></p>
<p>Овој објект засега е само иницијализиран, но не и зачуван. Со цел да го зачуваме во датабазата ќе ја изврѓиме следната команда во конзолата: <code><irb> article.save</code></p>
<p>Користејќи ја конзолата и овие 2 команди, целиот текст кој е впишан директно во index.html.erb ќе го поделам во неколку логички целини и преку <code>@articles = Article.all</code> впишана во методата index во контролерот Articles, кои ќе бидат прикажани, после додавање на следниот код во index.html.erb фајлот:</p>
<pre><code>
h2 Статии h2

ul
  % @articles.each do |article| %
    li
      %= article.title %
    li
  % end %
ul
</code></pre>
